#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–æ–≤ —Å –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç.
"""

import os
import json
import logging
import tempfile
from typing import Dict, Any, List
import pandas as pd
from telegram import Update, Document
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown."""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

class PushExcelConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–æ–≤ —Å –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ JSON."""
    
    @staticmethod
    def parse_excel_to_categories(file_path: str) -> Dict[str, Dict[str, Any]]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª –≤ JSON —Ñ–æ—Ä–º–∞—Ç —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        
        Args:
            file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            
        Returns:
            Dict —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(file_path)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ, –∏—Å–∫–ª—é—á–∞—è NaN)
            languages = df.iloc[:, 0].dropna().unique().tolist()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∫–æ–ª–æ–Ω–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
            categories = df.columns[1:].tolist()
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç - —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories_data = {}
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            for category in categories:
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_result = {
                    "languages": languages,
                    "pushes": []
                }
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –ø—É—à–∞–º
                push_groups = []
                current_group = []
                
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —è–∑—ã–∫–∞–º
                for i, row in df.iterrows():
                    lang = row.iloc[0]
                    
                    if pd.notna(lang):  # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
                        if lang == languages[0] and current_group:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —è–∑—ã–∫ –∏ —É–∂–µ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞
                            push_groups.append(current_group)
                            current_group = []
                        current_group.append(i)
                    else:  # –°—Ç—Ä–æ–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (NaN –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ)
                        if current_group:
                            current_group.append(i)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
                if current_group:
                    push_groups.append(current_group)
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—à–∏ –∏–∑ –≥—Ä—É–ø–ø
                push_id = 1
                for group in push_groups:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –≥—Ä—É–ø–ø–µ –µ—Å—Ç—å –≤—Å–µ —è–∑—ã–∫–∏
                    push_translations = {}
                    
                    i = 0
                    while i < len(group):
                        row_idx = group[i]
                        lang = df.iloc[row_idx, 0]
                        
                        if pd.notna(lang) and lang in languages:
                            title = df.loc[row_idx, category] if category in df.columns else ""
                            message = ""
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                            if i + 1 < len(group):
                                next_row_idx = group[i + 1]
                                if pd.isna(df.iloc[next_row_idx, 0]):
                                    message = df.iloc[next_row_idx][category] if category in df.columns else ""
                                    i += 1  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                            
                            push_translations[lang] = {
                                "title": str(title) if pd.notna(title) else "",
                                "message": str(message) if pd.notna(message) else ""
                            }
                        
                        i += 1
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–µ—Ä–µ–≤–æ–¥
                    if push_translations:
                        push_data = {
                            "id": f"push_{str(push_id).zfill(3)}",
                            "translations": push_translations
                        }
                        category_result["pushes"].append(push_data)
                        push_id += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                categories_data[category] = category_result
            
            return categories_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Excel —Ñ–∞–π–ª–∞: {e}")
            raise
    
    @staticmethod
    def validate_excel_structure(file_path: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Excel —Ñ–∞–π–ª–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –∏–Ω–∞—á–µ False
        """
        try:
            df = pd.read_excel(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
            if df.empty:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –∫–æ–ª–æ–Ω–∫–∏
            if len(df.columns) < 2:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –µ—Å—Ç—å —è–∑—ã–∫–∏
            languages = df.iloc[:, 0].dropna().unique()
            if len(languages) == 0:
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return False

class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞."""
    
    def __init__(self, token: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
        self.token = token
        self.application = Application.builder().token(token).build()
        self.converter = PushExcelConverter()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.Document.FileExtension("xlsx"), self.handle_excel_file))
        self.application.add_handler(MessageHandler(filters.Document.FileExtension("xls"), self.handle_excel_file))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.""" 
        welcome_message = (
            "**üéØ Push Notifications Converter Bot**\n\n"
            "*–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Excel —Ñ–∞–π–ª—ã —Å –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç.*\n\n"
            "**üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
            "1Ô∏è‚É£ *–ó–∞–≥—Ä—É–∑–∏ Excel —Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls)*\n"
            "2Ô∏è‚É£ *–ü–æ–ª—É—á–∏ JSON —Ñ–∞–π–ª –≤ –æ—Ç–≤–µ—Ç* ‚ú®\n\n"
            "**üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Excel —Ñ–∞–π–ª–∞:**\n"
            "‚Ä¢ *–ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞* - –∫–æ–¥—ã —è–∑—ã–∫–æ–≤ (en, ar, de, es –∏ —Ç.–¥.)\n"
            "‚Ä¢ *–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏* - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—à–µ–π\n"
            "‚Ä¢ *–ö–∞–∂–¥—ã–π —è–∑—ã–∫* –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å 2 —Å—Ç—Ä–æ–∫–∏: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "**üîß –ö–æ–º–∞–Ω–¥—ã:**\n"
            "/help - *–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É*\n\n"
            "*–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ Excel —Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∏ JSON!* üöÄ"
        )
        
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        help_message = (
            "**üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**\n\n"
            "**üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:**\n"
            "*–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Excel —Ñ–∞–π–ª–æ–≤ —Å –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç*\n\n"
            "**üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
            "‚Ä¢ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)\n\n"
            "**üìÅ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ñ–∞–π–ª–∞:**\n\n"
            "**–ö–æ–ª–æ–Ω–∫–∞ A (–Ø–∑—ã–∫–∏):**\n"
            "‚Ä¢ en (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)\n"
            "‚Ä¢ ar (–∞—Ä–∞–±—Å–∫–∏–π) \n"
            "‚Ä¢ de (–Ω–µ–º–µ—Ü–∫–∏–π)\n"
            "‚Ä¢ es (–∏—Å–ø–∞–Ω—Å–∫–∏–π)\n"
            "‚Ä¢ fr (—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π)\n"
            "‚Ä¢ –∏ –¥—Ä—É–≥–∏–µ...\n\n"
            "**–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–ö–∞—Ç–µ–≥–æ—Ä–∏–∏):**\n"
            "‚Ä¢ Betting (—Å—Ç–∞–≤–∫–∏)\n"
            "‚Ä¢ Gambling (–∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã)\n"
            "‚Ä¢ Dating (–∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞)\n"
            "‚Ä¢ Dating Adult (–≤–∑—Ä–æ—Å–ª—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞)\n"
            "‚Ä¢ Webcam (–≤–µ–±-–∫–∞–º–µ—Ä—ã)\n"
            "‚Ä¢ Subscription (–ø–æ–¥–ø–∏—Å–∫–∏)\n"
            "‚Ä¢ –∏ –¥—Ä—É–≥–∏–µ...\n\n"
            "**üìù –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:**\n"
            "*–î–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —Å—Ç—Ä–æ–∫–∏:*\n"
            "1Ô∏è‚É£ *–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n"
            "2Ô∏è‚É£ *–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è*\n\n"
            "**üí° –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
            "*–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å Excel —Ñ–∞–π–ª –≤ —á–∞—Ç, –∏ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –≤ JSON!*\n\n"
            "**‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏:**\n"
            "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞\n"
            "‚Ä¢ –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª\n"
            "‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "*–í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –±–æ—Ç —Å–æ–æ–±—â–∏—Ç –æ–± —ç—Ç–æ–º –∏ –ø–æ–º–æ–∂–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É.* üîß"
        )
        
        await update.message.reply_text(help_message, parse_mode='Markdown')
    
    async def handle_excel_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Excel —Ñ–∞–π–ª–æ–≤."""
        try:
            document: Document = update.message.document
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20MB)
            if document.file_size > 20 * 1024 * 1024:
                await update.message.reply_text(
                    "**‚ùå –û—à–∏–±–∫–∞**\n\n"
                    "*–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!* üìÅ\n"
                    "*–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB*",
                    parse_mode='Markdown'
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text(
                "**üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...**\n\n"
                "*–ó–∞–≥—Ä—É–∂–∞—é –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é Excel —Ñ–∞–π–ª –≤ JSON*\n"
                "*–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥* ‚è≥",
                parse_mode='Markdown'
            )
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as temp_file:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                file = await document.get_file()
                await file.download_to_drive(temp_file.name)
                
                try:
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
                    if not self.converter.validate_excel_structure(temp_file.name):
                        await processing_msg.edit_text(
                            "**‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ñ–∞–π–ª–∞**\n\n"
                            "*–§–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ!*\n\n"
                            "**üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
                            "‚Ä¢ *–ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞* - –∫–æ–¥—ã —è–∑—ã–∫–æ–≤\n"
                            "‚Ä¢ *–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏* - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
                            "‚Ä¢ *–ú–∏–Ω–∏–º—É–º 2 –∫–æ–ª–æ–Ω–∫–∏*\n\n"
                            "*–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏* üí°",
                            parse_mode='Markdown'
                        )
                        return
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON (–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
                    categories_data = self.converter.parse_excel_to_categories(temp_file.name)
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ JSON —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    json_files_paths = []
                    json_filenames = []
                    
                    base_filename = document.file_name.split('.')[0]
                    
                    for category, category_data in categories_data.items():
                        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        safe_category = category.lower().replace(' ', '_').replace('&', 'and')
                        json_filename = f"{safe_category}_{base_filename}.json"
                        
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JSON —Ñ–∞–π–ª
                        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as json_file:
                            json.dump(category_data, json_file, ensure_ascii=False, indent=2)
                            json_files_paths.append(json_file.name)
                            json_filenames.append(json_filename)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    total_languages = len(list(categories_data.values())[0]['languages'])
                    total_categories = len(categories_data)
                    
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                    safe_filename = escape_markdown(document.file_name)
                    
                    info_message = (
                        "**‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                        f"**üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª:** {safe_filename}\n"
                        f"**üìä –ù–∞–π–¥–µ–Ω–æ —è–∑—ã–∫–æ–≤:** {total_languages}\n"
                        f"**üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:** {total_categories}\n\n"
                        f"**üåç –Ø–∑—ã–∫–∏:** {', '.join(list(categories_data.values())[0]['languages'])}\n\n"
                        f"**üì¶ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** {len(json_files_paths)}\n"
                        "*–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–¥–µ–ª—å–Ω—ã–µ JSON —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\\.\\.\\. üöÄ*"
                    )
                    
                    await processing_msg.edit_text(info_message, parse_mode='Markdown')
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π JSON —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ
                    for i, (json_file_path, json_filename) in enumerate(zip(json_files_paths, json_filenames)):
                        category_name = list(categories_data.keys())[i]
                        category_data = list(categories_data.values())[i]
                        
                        with open(json_file_path, 'rb') as json_file:
                            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                            safe_category = escape_markdown(category_name)
                            
                            caption = (
                                f"**üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {safe_category}\n\n"
                                f"**üéØ –ü—É—à–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:** {len(category_data['pushes'])}\n"
                                f"**üåç –Ø–∑—ã–∫–æ–≤:** {len(category_data['languages'])}\n\n"
                                "*–§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\\!* ‚ú®"
                            )
                            
                            await update.message.reply_document(
                                document=json_file,
                                filename=json_filename,
                                caption=caption,
                                parse_mode='Markdown'
                            )
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    for json_file_path in json_files_paths:
                        os.unlink(json_file_path)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                    await processing_msg.edit_text(
                        "**‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞**\n\n"
                        f"*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:* `{str(e)}`\n\n"
                        "*–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É*\n"
                        "*–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏* üí°",
                        parse_mode='Markdown'
                    )
                
                finally:
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(temp_file.name)
        
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text(
                "**‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞**\n\n"
                "*–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑*\n"
                "*–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É* üõ†Ô∏è",
                parse_mode='Markdown'
            )
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        message = (
            "**üì§ –û—Ç–ø—Ä–∞–≤—å Excel —Ñ–∞–π–ª**\n\n"
            "*–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ JSON –æ—Ç–ø—Ä–∞–≤—å Excel —Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls)*\n\n"
            "**üí° –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?**\n"
            "*–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π*"
        )
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("üìù –°–æ–∑–¥–∞–π .env —Ñ–∞–π–ª –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export TELEGRAM_BOT_TOKEN='your_bot_token_here'")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = TelegramBot(token)
    bot.run()

if __name__ == '__main__':
    main()
