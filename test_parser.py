#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ Excel —Ñ–∞–π–ª–æ–≤.
"""

import json
import pandas as pd
from typing import Dict, Any

class PushExcelConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–æ–≤ —Å –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ JSON."""
    
    @staticmethod
    def parse_excel_to_categories(file_path: str) -> Dict[str, Dict[str, Any]]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª –≤ JSON —Ñ–æ—Ä–º–∞—Ç —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        
        Args:
            file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            
        Returns:
            Dict —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(file_path)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ, –∏—Å–∫–ª—é—á–∞—è NaN)
            languages = df.iloc[:, 0].dropna().unique().tolist()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∫–æ–ª–æ–Ω–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
            categories = df.columns[1:].tolist()
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç - —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories_data = {}
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            for category in categories:
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_result = {
                    "languages": languages,
                    "pushes": []
                }
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –ø—É—à–∞–º
                push_groups = []
                current_group = []
                
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —è–∑—ã–∫–∞–º
                for i, row in df.iterrows():
                    lang = row.iloc[0]
                    
                    if pd.notna(lang):  # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
                        if lang == languages[0] and current_group:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —è–∑—ã–∫ –∏ —É–∂–µ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞
                            push_groups.append(current_group)
                            current_group = []
                        current_group.append(i)
                    else:  # –°—Ç—Ä–æ–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (NaN –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ)
                        if current_group:
                            current_group.append(i)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
                if current_group:
                    push_groups.append(current_group)
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—à–∏ –∏–∑ –≥—Ä—É–ø–ø
                push_id = 1
                for group in push_groups:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –≥—Ä—É–ø–ø–µ –µ—Å—Ç—å –≤—Å–µ —è–∑—ã–∫–∏
                    push_translations = {}
                    
                    i = 0
                    while i < len(group):
                        row_idx = group[i]
                        lang = df.iloc[row_idx, 0]
                        
                        if pd.notna(lang) and lang in languages:
                            title = df.loc[row_idx, category] if category in df.columns else ""
                            message = ""
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                            if i + 1 < len(group):
                                next_row_idx = group[i + 1]
                                if pd.isna(df.iloc[next_row_idx, 0]):
                                    message = df.iloc[next_row_idx][category] if category in df.columns else ""
                                    i += 1  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                            
                            push_translations[lang] = {
                                "title": str(title) if pd.notna(title) else "",
                                "message": str(message) if pd.notna(message) else ""
                            }
                        
                        i += 1
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–µ—Ä–µ–≤–æ–¥
                    if push_translations:
                        push_data = {
                            "id": f"push_{str(push_id).zfill(3)}",
                            "translations": push_translations
                        }
                        category_result["pushes"].append(push_data)
                        push_id += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                categories_data[category] = category_result
            
            return categories_data
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Excel —Ñ–∞–π–ª–∞: {e}")
            raise

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞."""
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–ê–†–°–ï–†–ê EXCEL ===\n")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
    converter = PushExcelConverter()
    
    try:
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª (–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ)
        categories_data = converter.parse_excel_to_categories('push.xlsx')
        
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories_data)}")
        print(f"üåç –Ø–∑—ã–∫–∏: {', '.join(list(categories_data.values())[0]['languages'])}")
        print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ JSON —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category, category_data in categories_data.items():
            safe_category = category.lower().replace(' ', '_').replace('&', 'and')
            filename = f"test_{safe_category}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(category_data, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ {category}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        
        print()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ===")
        for i, (category, category_data) in enumerate(categories_data.items()):
            print(f"\n{i+1}. **{category}**")
            print(f"   üéØ –ü—É—à–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(category_data['pushes'])}")
            print(f"   üåç –Ø–∑—ã–∫–æ–≤: {len(category_data['languages'])}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            if category_data['pushes'] and 'en' in category_data['pushes'][0]['translations']:
                en_data = category_data['pushes'][0]['translations']['en']
                print(f"   üìù –ü—Ä–∏–º–µ—Ä (EN): \"{en_data['title']}\"")
                print(f"                   \"{en_data['message']}\"")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        print("\n=== –ü–†–ò–ú–ï–† –°–¢–†–£–ö–¢–£–†–´ JSON (–ø–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è) ===")
        first_category = list(categories_data.keys())[0]
        first_category_data = categories_data[first_category]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø—É—à –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        example_data = {
            "languages": first_category_data["languages"],
            "pushes": first_category_data["pushes"][:1]  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø—É—à
        }
        
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {first_category}")
        print(json.dumps(example_data, ensure_ascii=False, indent=2))
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
